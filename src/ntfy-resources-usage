#!/bin/bash

#########################################################################
#                                                                       #
# ntfy-resources-usage plugin v1.0.2                                    #
# Send notifications to your ntfy client when your computer runs out of #
# resources. For more info, check out:                                  #
# https://github.com/TheRealOne78/ntfy-resources-usage                  #
# https://github.com/TheRealOne78/ntfy-resources-usage/wiki             #
#                                                                       #
# Copyright (c) 2024 TheRealOne78                                       #
# Distributed under the terms of the GNU General Public License v3+     #
# https://www.gnu.org/licenses/gpl-3.0.en.html
#                                                                       #
#########################################################################

### Variables ###

## << G E N E R A L >>
# The name of this computer
DEVICE_NAME=$(hostname)

# The ntfy topic URI this plugin is going to send notifications
#NTFY_TOPIC="ntfy.sh/"

# File containing authentication credentials for ntfy instances where it
# requires a user and password
#
# The file should be user:password. The user must not contain a colon character
# (':') because anything after the first colon will be treated as the password.
#
# Leave this variable commented out if you don't need/want to authenticate.
#
# WARNING: For security reasons, the auth file should have read permission only
# for the root user (600). You have been warned!
#NTFY_AUTH_FILE="/etc/ntfy-resources-usage/auth"

# The ntfy priority level: [min, low, default, high, urgent]
NTFY_PRIORITY="default"

# Delay time between resources checks in seconds
# Here are 2 variable examples, one with minutes where you don't need to
# calculate how many seconds in 'n' minutes and another one that uses seconds.
# Make sure to comment/uncomment
#
DELAY_TIME="$((5 * 60))" # for minutes
##  minutes----^   ^---1 minute in seconds #
#DELAY_TIME="300"        # use only seconds

# Debug info. Uncomment to send debug info.
#DEBUG="true"


## << C H E C K >>
# Check for RAM?
CHECK_RAM=true

# Check for disk usage?
CHECK_DISK=true

# Check for battery?
CHECK_BATTERY=false


## << TITLE >>
# Low memory(RAM) title
RAM_TITLE="$DEVICE_NAME: Running out of memory"

# Low storage title
DISK_TITLE="$DEVICE_NAME: Running out of storage"

# Low battery title
BATTERY_TITLE="$DEVICE_NAME: Running out of battery"


## << M E S S A G E >>
# Low memory(RAM) message
RAM_MSG="$DEVICE_NAME is running out of memory: "

# Low storage message
DISK_MSG="$DEVICE_NAME is running out of storage: "

# Low battery message
BATTERY_MSG="$DEVICE_NAME: Running out of battery: "


## << R A T I O >>
# Memory ratio to send alert
MIN_RAM_RATIO="20"

# Disk ratio to send alert
MIN_DISK_RATIO="20"

# Battery ratio to send alert
MIN_BATTERY_RATIO="20"

### End Of Variables ###

##############################################
#  _____  ___  ___________  _______  ___  ___  #
# (\"   \|"  \("     _   ")/"     "||"  \/"  | #
# |.\\   \    |)__/  \\__/(: ______) \   \  /  #
# |: \.   \\  |   \\_ /    \/    |    \\  \/   #
# |.  \    \. |   |.  |    // ___)    /   /    #
# |    \    \ |   \:  |   (:  (      /   /     #
#  \___|\____\)    \__|    \__/     |__v1.0.2  #
##############################################

### Code ###

# Handle INT and TERM signals by exiting with 0
trap "exit 0" SIGINT
trap "exit 0" SIGTERM

# Import user defined variables
if [ -f "/etc/ntfy-resources-usage/ntfy-resources-usage.conf" ]; then
  source "/etc/ntfy-resources-usage/ntfy-resources-usage.conf"
else
  printf "$INFO No configuration file found, using default parameters.\n"
fi

if [ -z "${NTFY_TOPIC}" ]; then
  printf "$ERR No NTFY topic was set. nfty-resources-usage can't run without a topic.\n"
  exit_unsuccess
fi

# Terminal colors
RED="\e[31m"
YELLOW="\e[33m"
BLUE="\e[34m"
ENDCOLOR="\e[0m"

INFO="["$BLUE"i"$ENDCOLOR"]"
WARN="["$YELLOW"w"$ENDCOLOR"]"
ERR="["$RED"e"$ENDCOLOR"]"


############################################################
# The following code is forked from the neofetch project.  #
#                                                          #
# Upstream URL: https://github.com/dylanaraps/neofetch     #
# Original neofetch license: MIT - https://mit-license.org #
#                                                          #
# ntfy-resources-usage is not sponsored by or affiliated   #
# to neofetch or dylanaraps.                               #
############################################################
get_os() {
  # Cache the output of uname so we don't
  # have to spawn it multiple times.
  IFS=" " read -ra uname <<< "$(uname -srm)"

  kernel_name="${uname[0]}"
  kernel_version="${uname[1]}"
  kernel_machine="${uname[2]}"

  if [ "$kernel_name" == "Darwin" ]; then
    # macOS can report incorrect versions unless this is 0.
    # https://github.com/dylanaraps/neofetch/issues/1607
    export SYSTEM_VERSION_COMPAT=0

    IFS=$'\n' read -d "" -ra sw_vers <<< "$(awk -F'<|>' '/key|string/ {print $3}' \
      "/System/Library/CoreServices/SystemVersion.plist")"
    for ((i=0;i<${#sw_vers[@]};i+=2)) {
      case ${sw_vers[i]} in
        ProductName)          darwin_name=${sw_vers[i+1]} ;;
        ProductVersion)       osx_version=${sw_vers[i+1]} ;;
        ProductBuildVersion)  osx_build=${sw_vers[i+1]}   ;;
      esac
    }
    fi

  case $kernel_name in
    Darwin)   os=$darwin_name ;;
    SunOS)    os=Solaris ;;
    Haiku)    os=Haiku ;;
    MINIX)    os=MINIX ;;
    AIX)      os=AIX ;;
    IRIX*)    os=IRIX ;;
    FreeMiNT) os=FreeMiNT ;;

    Linux|GNU*)
      os=Linux
      ;;

    *BSD|DragonFly|Bitrig)
      os=BSD
      ;;

    CYGWIN*|MSYS*|MINGW*)
      os=Windows
      ;;

    *)
      printf "$ERR Unknown OS detected: \`$kernel_name'\n"
      exit_unsuccess
      ;;
  esac
}

get_mem() {
  while IFS=":" read -r a b; do
  case $a in
    "MemTotal") ((mem_used+=${b/kB})); mem_total="${b/kB}" ;;
    "Shmem") ((mem_used+=${b/kB}))  ;;
    "MemFree" | "Buffers" | "Cached" | "SReclaimable")
      mem_used="$((mem_used-=${b/kB}))"
      ;;
  esac
  done < /proc/meminfo
}

get_disk() {
  type -p df &>/dev/null || {
    printf "$ERR Disk requires \`df' to function! Install \`df' to get disk info.\n";
    exit_unsuccess
  }

  df_version=$(df --version 2>&1)

  case $df_version in
    *IMitv*) # AIX
      df_flags=(-P -g)
      ;;

    *befhikm*) # IRIX
      df_flags=(-P -k)
      ;;

    *hiklnP*) # OpenBSD
      df_flags=(-h)
      ;;

    *Tracker*) # Haiku
      printf "$ERR Your version of \`df' cannot be used due to the non-standard flags!\n"
      exit_unsuccess
      ;;

    *)
      df_flags=(-P -h)
      ;;
  esac

  # Create an array called 'disks' where each element is a separate line from
  # df's output. We then unset the first element which removes the column titles.
  IFS=$'\n' read -d "" -ra disks <<< "$(df "${df_flags[@]}" "${disk_show[@]:-/}")"
  unset "disks[0]"

  # Stop here if 'df' fails to print disk info.
  [[ ${disks[*]} ]] || {
    printf "$ERR Disk: df failed to print the disks, make sure the disk_show array is set properly.\n"
    exit_unsuccess
  }

  for disk in "${disks[@]}"; do
  # Create a second array and make each element split at whitespace this time.
  IFS=" " read -ra disk_info <<< "$disk"
  disk_perc=${disk_info[-2]/\%}

  case $df_version in
    *befhikm*)
      disk="$((disk_info[-4]/1024/1024))GiB out of $((disk_info[-5]/1024/1024))GiB"
      ;;

    *)
      disk="${disk_info[-4]/i}iB out of ${disk_info[-5]/i}iB"
      ;;
  esac
  done
}

get_battery() {
  case $os in
    "Linux")
      for bat in "/sys/class/power_supply/"{BAT,axp288_fuel_gauge,CMB}*; do
        if [ ! -d ${bat} ]; then
          continue
        fi

        capacity="$(< "${bat}/capacity")"

        if [[ "$capacity" ]]; then
          battery="${capacity}"
        fi
      done
      return
      ;;

    "BSD")
      case $kernel_name in
        "FreeBSD"* | "DragonFly"*)
          battery="$(acpiconf -i 0 | awk -F ':\t' '/Remaining capacity/ {print $2}')"
          ;;

        "NetBSD"*)
          battery="$(envstat | awk '\\(|\\)' '/charge:/ {print $2}')"
          battery="${battery/\.*/%}"
          ;;

        "OpenBSD"* | "Bitrig"*)
          battery0full="$(sysctl -n   hw.sensors.acpibat0.watthour0\
            hw.sensors.acpibat0.amphour0)"
          battery0full="${battery0full%% *}"

          battery0now="$(sysctl -n    hw.sensors.acpibat0.watthour3\
            hw.sensors.acpibat0.amphour3)"
          battery0now="${battery0now%% *}"

          state="$(sysctl -n hw.sensors.acpibat0.raw0)"
          state="${state##? (battery }"
          state="${state%)*}"

          [[ "${state}" == "charging" ]] && battery_state="charging"
          [[ "$battery0full" ]] && \
            battery="$((100 * ${battery0now/\.} / ${battery0full/\.}))"
          ;;
      esac
      ;;

    "Mac OS X"|"macOS")
      battery="$(pmset -g batt | grep -o '[0-9]*%')"
      state="$(pmset -g batt | awk '/;/ {print $4}')"
      [[ "$state" == "charging;" ]] && battery_state="charging"
      ;;

    "Windows")
      battery="$(wmic Path Win32_Battery get EstimatedChargeRemaining)"
      battery="${battery/EstimatedChargeRemaining}"
      battery="$(trim "$battery")%"
      state="$(wmic /NameSpace:'\\root\WMI' Path BatteryStatus get Charging)"
      state="${state/Charging}"
      [[ "$state" == *TRUE* ]] && battery_state="charging"
      ;;

    "Haiku")
      battery0full="$(awk -F '[^0-9]*' 'NR==2 {print $4}' /dev/power/acpi_battery/0)"
      battery0now="$(awk -F '[^0-9]*' 'NR==5 {print $4}' /dev/power/acpi_battery/0)"
      battery="$((battery0full * 100 / battery0now))%"
      ;;
  esac
}
################################################
# End of code forked from the neofetch project #
################################################


unset_vars() {
  # get_mem
  unset a
  unset mem_used
  unset mem_total

  # get_disk
  unset disk
  unset disk_perc
  unset IFS
  unset disks
  unset df_flags
  unset disk_info

  # calculate mem
  unset USED_MEM
  unset TOTAL_MEM
  unset FREE_MEM
  unset RATIO_MEM

  # calculate disk
  unset USED_DISK
  unset TOTAL_DISK
  unset FREE_DISK
  unset RATIO_DISK

  # calculate battery
  unset RATIO_BATTERY

  # cURL args
  unset curl_args
}

exit_unsuccess() {
  printf "$ERR Exiting...\n"
  exit 1
}

get_credetentials() {
  # Check if auth file exists and it's readable
  if [ ! -r "${NTFY_AUTH_FILE}" ]; then
    if [ ! -f "${NTFY_AUTH_FILE}" ]; then
      printf "$ERR Auth file does not exist! Please create one or comment out \`NTFY_AUTH_FILE'.\n"
    else
      printf "$ERR Cannot read auth file! Are the file permissions correct (600)?\tAre you running \`ntfy-resources-usage' with the right user?\n"
    fi
    exit_unsuccess
  fi

  # Sanitize the auth file
  NTFY_AUTH=$( < "${NTFY_AUTH_FILE}")

  # Check if empty
  if [ -z ${NTFY_AUTH} ]; then
    printf "$ERR Auth file is empty! Please enter credetentials in \`${NTFY_AUTH_FILE}' or comment out \`NTFY_AUTH_FILE'.\n"
    exit_unsuccess
  fi
}

check_http_status() {
  case ${1} in
    200)
      return 0
      ;;

    401 | 403)
      printf "$ERR Couldn't authenticate to \`${NTFY_TOPIC}'"
      if [ -z "${NTFY_AUTH_FILE}" ]; then
        printf " and there is no auth file, please set one.n"
      else
        printf ", are credentials valid?"
      fi
      printf " (Error ${1})\n"
      exit_unsuccess
      ;;

    404)
      printf "$ERR \`${NTFY_TOPIC}' could not be found, is NTFY_TOPIC correct?\n"
      exit_unsuccess
      ;;

    418)
      printf "$ERR The NTFY_TOPIC address you've entered is actually teapot, therefore it cannot brew coffee (Error 418).\n"
      printf "$ERR You've been basically banned or something from \`${NTFY_TOPIC}'. Perhaps you've been sending too much furry p*rn in there?\n"
      exit_unsuccess
      ;;

    *)
      printf "$WARN Uncatched HTTP response status code \`${1}', continuing anyway...\n"
      ;;
  esac
}

check_memory() {
  get_mem
  USED_MEM="$((mem_used / 1024))"
  TOTAL_MEM="$((mem_total / 1024))"
  FREE_MEM="$((TOTAL_MEM - USED_MEM))"
  RATIO_MEM="$(($(($FREE_MEM * 100)) / $TOTAL_MEM ))"

  # Check and send memory warnings
  if [ ${RATIO_MEM} -lt ${MIN_RAM_RATIO} ]; then

    # Build up the curl arguments
    curl_args=(--silent -o /dev/null -w "%{http_code}")

    # If $NTFY_AUTH does not exist, do NOT use it
    if [ ! -z "$NTFY_AUTH" ]; then
      curl_args+=(-u "${NTFY_AUTH}")
    fi

    # Add the rest of the arguments that will make up the final ntfy message
    curl_args+=(
      -H "title: ${RAM_TITLE}"
      -H "priority: ${NTFY_PRIORITY}"
      -H "tags: computer"
      -d "${RAM_MSG}${FREE_MEM} MiB out of ${TOTAL_MEM} MiB"
      "${NTFY_TOPIC}"
      )

    http_code=$(curl "${curl_args[@]}")
    check_http_status ${http_code}

    if [ "$DEBUG" == "true" ]; then
      printf "$INFO Sent notification to \`${NTFY_TOPIC}', priority - ${NTFY_PRIORITY}, message ${RAM_MSG}${FREE_MEM} MiB out of ${TOTAL_MEM} MiB\n"
    fi
  fi
}

check_disk() {
  get_disk
  USED_DISK="$(echo ${disk_info[-4]} | sed 's/[A-Za-z]//g')"
  TOTAL_DISK="$(echo ${disk_info[-5]} | sed 's/[A-Za-z]//g')"
  FREE_DISK="$(($TOTAL_DISK - $USED_DISK))"
  RATIO_DISK="$(($(($FREE_DISK * 100)) / $TOTAL_DISK ))"

  # Check and send storage warnings
  if [ $RATIO_DISK -lt $MIN_DISK_RATIO ]; then

    # Build up the curl arguments
    curl_args=(--silent -o /dev/null -w "%{http_code}")

    # If $NTFY_AUTH does not exist, do NOT use it
    if [ ! -z "$NTFY_AUTH" ]; then
      curl_args+=(-u ${NTFY_AUTH})
    fi

    # Add the rest of the arguments that will make up the final ntfy message
    curl_args+=(
      -H "title: ${DISK_TITLE}"
      -H "priority: ${NTFY_PRIORITY}"
      -H "tags: floppy_disk"
      -d "${DISK_MSG}${FREE_DISK} GiB out of ${TOTAL_DISK} GiB"
      "${NTFY_TOPIC}"
    )

    http_code=$(curl "${curl_args[@]}")
    check_http_status ${http_code}
    if [ "$DEBUG" == true ]; then
      printf "$INFO Sent notification to \`${NTFY_TOPIC}', priority - ${NTFY_PRIORITY}, message ${DISK_MSG}${FREE_DISK} out of ${TOTAL_DISK}\n"
    fi
  fi
}

check_battery() {
  get_battery
  RATIO_BATTERY=$(echo ${battery} | tr -d '%')

  if [ $RATIO_BATTERY -lt $MIN_BATTERY_RATIO ]; then
    # Build up the curl arguments
    curl_args=(--silent -o /dev/null -w "%{http_code}")

    # If $NTFY_AUTH does not exist, do NOT use it
    if [ ! -z "$NTFY_AUTH" ]; then
      curl_args+=(-u "${NTFY_AUTH}")
    fi

    # Add the rest of the arguments that will make up the final ntfy message
    curl_args+=(
      -H "title: ${BATTERY_TITLE}"
      -H "priority: ${NTFY_PRIORITY}"
      -H "tags: battery"
      -d "${BATTERY_MSG}${RATIO_BATTERY}%"
      "${NTFY_TOPIC}"
    )

    http_code=$(curl "${curl_args[@]}")
    check_http_status ${http_code}
    if [ "$DEBUG" == "true" ]; then
      printf "$INFO Sent notification to \`${NTFY_TOPIC}', priority - ${NTFY_PRIORITY}, message ${DISK_MSG}${FREE_DISK} out of ${TOTAL_DISK}\n"
    fi
  fi
}

main() {
  # If default config, inform the user and exit unsuccessfuly
  if [ "${NTFY_TOPIC}" = "ntfy.sh/" ]; then
    printf "$ERR You are probably using the default configuration!\n"
    printf "$ERR \`NTFY_TOPIC' is set to the default \`ntfy.sh/' topic, which is an invalid topic.\n"
    printf "$ERR Please edit the configuration file and set the right values.\n"
    printf "$ERR You can get help from https://github.com/TheRealOne78/ntfy-resources-usage/wiki\n"
    exit 1
  fi

  # Prepare OS info
  get_os

  if [ ! -z "$NTFY_AUTH_FILE" ]; then
    # Get user and password
    get_credetentials
  fi

  if [ "$CHECK_RAM" != "true" ] && [ "$CHECK_DISK" != "true" ] && [ "$CHECK_BATTERY" != "true"  ]; then
     printf "There is nothing set to check. Exiting...\n"
     exit 0
  fi

  # Get resource info from computer, check it, send it and repeat
  while (true); do

    if [ "$CHECK_RAM" == "true" ]; then
      check_memory
    fi

    if [ "$CHECK_DISK" == "true" ]; then
      check_disk
    fi

    if [ "$CHECK_BATTERY" == "true" ]; then
      check_battery
    fi

    unset_vars

    sleep $DELAY_TIME # Check again in $DELAY_TIME seconds

  done
}

main
